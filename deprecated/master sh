# To get hostname of other pis in the network

names = red[01-03]
Host.ssh(names, "sudo apt-get install rsync")


#function otherpis {
#        grep "pi" /etc/hosts | awk '{print $2}' | grep -v $(hostname)
#}



# To send commands to other pis in the network
#function clustercmd {
#        for pi in $(otherpis); do ssh $pi "$@"; done
#        $@
#}

# To send files to other pis
#function clusterscp {
#        for pi in $(otherpis); do
#                cat $1 | ssh $pi "sudo tee $1" > /dev/null 2>&1
#        done
#}
Shell.scp(source, desintaion)



# To restart all pis
#function clusterreboot {
#        clustercmd sudo shutdown -r now
#}

Host.ssh(names, "clustercmd sudo shutdown -r now")



# To shutdown all pis
#function clustershutdown {
#        clustercmd sudo shutdown now
#}

Host.ssh(names, "clustercmd sudo shutdown now")



# To copy the files in /opt/hadoop to all Pis
#function copyconfig {
#        for pi in $(otherpis); do rsync -avxP $HADOOP_HOME $pi:/opt; done
#}

Hsot.ssh(names, "rsync -avxP $HADOOP_HOME {name}:/opt")


exports = """

export JAVA_HOME=/usr/lib/jvm/java-11-openjdk-armhf
export HADOOP_HOME=/opt/hadoop
export SPARK_HOME=/opt/spark
export PATH=$JAVA_HOME/bin:$HADOOP_HOME/bin:$HADOOP_HOME/sbin:$SPARK_HOME/bin:$PATH
export HADOOP_HOME_WARN_SUPRESS=1

"""

bashrc = "# ????"

bashrc = bashrc + exports

print (bashrc)

# writh this to tmp/.bashrc

source = "tmp/.bashrc"

Host.scp (source, "red[01-03]:.bashrc")

class Hadoop():

    def install():
        rasie NotimplementedError

    def uninstall():
        rasie NotimplementedError

    def register_master(name):
        rasie NotimplementedError

    def register_worker(names):
        rasie NotimplementedError


cms host ssh red[01-03] \"cat /Users/grey/Desktop/github/cloudmesh-community/cm/fa19-516-158/cluster/{name}/authorized_keys\"
